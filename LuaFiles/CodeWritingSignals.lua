require'Utilities'
require'CodeWriting'
local U = Utilities
local CW = CodeWriting

deprecatedNaughtyModule(...)

local tabs = function(number)
	local indent = ''
	number = number or 0
	for i = 1, number do
		indent = indent..'\t'
	end
	return indent
end

local more = function(output, numtabs, newString)
	if numtabs > 0 then
		output = output..tabs(1)..newString
	else
		output = output..newString
	end
end

function writeClassBasedOnNumberOfArguments(myFile, nargs)
	local output
	output = ''
	output = output..			'template<'..CW.templateArguments(0, nargs)..'>\n'
	output = output..			'class Transmitter'..nargs..' : public Transmitter\n'
	output = output..			'{\n'
	output = output..			'private:\n'
	output = output..tabs(1)..		'template<'..CW.templateArguments(0, nargs)..'>\n'
	output = output..tabs(1)..		'class Connection\n'
	output = output..tabs(1)..		'{\n'	
	output = output..tabs(1)..		'public:\n'
	output = output..tabs(2)..			'virtual ~Connection(void)=0 {};\n'
	output = output..tabs(2)..			'virtual Connection<'..CW.templateArgumentsSignature(0, nargs)..'>* clone(void)=0;\n'
	output = output..tabs(2)..			'virtual Connection<'..CW.templateArgumentsSignature(0, nargs)..'>* duplicate(Receiver* receiver)=0;\n'
	output = output..tabs(2)..			'virtual Receiver* getReceiver(void) const=0;\n'
	output = output..tabs(2)..			'virtual void transmit('..CW.templateArgumentsSignature(0, nargs)..') const=0;\n'
	output = output..tabs(1)..		'}; // class Connection\n'
	output = output..tabs(1)..		'template< class RECEIVER, '..CW.templateArguments(0, nargs)..'>\n'
	output = output..tabs(1)..		'class volatile'..nargs..'\n'
	output = output..tabs(1)..		': public Connection<'..CW.templateArgumentsSignature(0, nargs)..'>\n'
	output = output..tabs(1)..		'{\n'
	output = output..tabs(1)..		'public:\n'
	output = output..tabs(2)..			'volatile'..nargs..'(void)\n'
	output = output..tabs(2)..			': m_object(NULL)\n'
	output = output..tabs(2)..			', m_function(NULL)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'volatile'..nargs..'(RECEIVER* object, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..'))\n'
	output = output..tabs(2)..			': m_object(object)\n'
	output = output..tabs(2)..			', m_function(function)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'virtual Connection* clone(void)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new volatile'..nargs..'<RECEIVER, '..CW.templateArgumentsSignature(0, nargs)..'>(*this);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Connection* duplicate(Receiver* receiver)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new volatile'..nargs..'<RECEIVER, '..CW.templateArgumentsSignature(0, nargs)..'>(static_cast<RECEIVER*>(receiver), m_function);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Receiver* getReceiver(void) const\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return m_object;\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual void transmit('..CW.templateCallSignature(0, nargs)..') const\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'(m_object->*m_function)('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(1)..		'private:\n'
	output = output..tabs(2)..			'RECEIVER* m_object;\n'
	output = output..tabs(2)..			'void (RECEIVER::* m_function)('..CW.templateArgumentsSignature(0, nargs)..');\n'
	output = output..tabs(1)..		'}; // class volatile'..nargs..'\n'
	output = output..tabs(1)..		'template<class RECEIVER, '..CW.templateArguments(0, nargs)..'>\n'
	output = output..tabs(1)..		'class const'..nargs..'\n'
	output = output..tabs(1)..		': public Connection<'..CW.templateArgumentsSignature(0, nargs)..'>\n'
	output = output..tabs(1)..		'{\n'
	output = output..tabs(1)..		'public:\n'
	output = output..tabs(2)..			'const'..nargs..'(void)\n'	
	output = output..tabs(2)..			': m_object(NULL)\n'
	output = output..tabs(2)..			', m_function(NULL)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'const'..nargs..'(RECEIVER* object, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..') const)\n'
	output = output..tabs(2)..			': m_object(object)\n'
	output = output..tabs(2)..			', m_function(function)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'virtual Connection* clone(void)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new const'..nargs..'<RECEIVER, '..CW.templateArgumentsSignature(0, nargs)..'>(*this);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Connection* duplicate(Receiver* receiver)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new const'..nargs..'<RECEIVER, '..CW.templateArgumentsSignature(0, nargs)..'>(static_cast<RECEIVER*>(receiver), m_function);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Receiver* getReceiver(void) const\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return m_object;\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual void transmit('..templateDeclareFunctionSignature(0,nargs)..') const\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'(m_object->*m_function)('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(2)..			'}\n'	
	output = output..tabs(1)..		'private:\n'
	output = output..tabs(2)..			'RECEIVER* m_object;\n'
	output = output..tabs(2)..			'void (RECEIVER::* m_function)('..CW.templateArgumentsSignature(0, nargs)..') const;\n'
	output = output..tabs(1)..		'}; // class const'..nargs..'\n'
	output = output..tabs(0)..	'public:\n'
	output = output..tabs(1)..			'typedef std::list< Connection<'..CW.templateArgumentsSignature(0, nargs)..'> *> connections_list;\n'
	output = output..tabs(1)..			'Transmitter'..nargs..'(void)\n'
	output = output..tabs(1)..			'{}\n'
	output = output..tabs(1)..			'Transmitter'..nargs..'(const Transmitter'..nargs..'& s)\n'
	output = output..tabs(1)..			': Transmitter(s)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'connections_list::const_iterator iter = s.m_receivers.begin();\n'
	output = output..tabs(2)..				'connections_list::const_iterator sentinel = s.m_receivers.end();\n'
	output = output..tabs(2)..				'while (iter != sentinel)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'(*iter)->getReceiver()->onConnect(this);\n'
	output = output..tabs(3)..					'm_receivers.push_back((*iter)->clone());\n'
	output = output..tabs(3)..					'++iter;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'virtual ~Transmitter'..nargs..'(void)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'disconnectAll();\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'template<class RECEIVER>\n'
	output = output..tabs(1)..			'void connect(RECEIVER* receiver, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..'))\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'if (receiver && function)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'SYNC(m_mutex);\n'
	output = output..tabs(3)..					'connections_list::const_iterator iter = m_receivers.begin();\n'
	output = output..tabs(3)..					'connections_list::const_iterator sentinel = m_receivers.end();\n'
	output = output..tabs(3)..					'while (iter != sentinel)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'if ((*iter)->getReceiver() == static_cast<Receiver*>(receiver))\n'
	output = output..tabs(4)..						'{\n'
	output = output..tabs(5)..							'return;\n'
	output = output..tabs(4)..						'}\n'
	output = output..tabs(4)..						'++iter;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'm_receivers.push_back(new volatile'..nargs..'<RECEIVER, '..CW.templateArgumentsSignature(0, nargs)..'>(receiver, function));\n'
	output = output..tabs(3)..					'receiver->onConnect(this);\n'	
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'	
	output = output..tabs(1)..			'template<class RECEIVER>\n'
	output = output..tabs(1)..			'void connect(RECEIVER* receiver, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..') const)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'if (receiver && function)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'SYNC(m_mutex);\n'
	output = output..tabs(3)..					'connections_list::const_iterator iter = m_receivers.begin();\n'
	output = output..tabs(3)..					'connections_list::const_iterator sentinel = m_receivers.end();\n'
	output = output..tabs(3)..					'while (iter != sentinel)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'if ((*iter)->getReceiver() == static_cast<Receiver*>(receiver))\n'
	output = output..tabs(4)..						'{\n'
	output = output..tabs(5)..							'return;\n'
	output = output..tabs(4)..						'}\n'
	output = output..tabs(4)..						'++iter;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'm_receivers.push_back(new const'..nargs..'<RECEIVER, '..CW.templateArgumentsSignature(0, nargs)..'>(receiver, function));\n'
	output = output..tabs(3)..					'receiver->onConnect(this);\n'	
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void ceaseTransmission(void)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'disconnectAll();\n'
	output = output..tabs(2)..				'm_receivers.erase(m_receivers.begin(), m_receivers.end());\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void disconnect(Receiver* receiver)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'connections_list::iterator iter = m_receivers.begin();\n'
	output = output..tabs(2)..				'connections_list::iterator sentinel = m_receivers.end();\n'
	output = output..tabs(2)..				'while (iter != sentinel)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'Connection<'..CW.templateArgumentsSignature(0, nargs)..'>* connection = *iter;\n'
	output = output..tabs(3)..					'if (connection->getReceiver() == receiver)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'receiver->onDisconnect(this);\n'
	output = output..tabs(4)..						'delete connection;\n'
	output = output..tabs(4)..						'm_receivers.erase(iter);\n'
	output = output..tabs(4)..						'return;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'++iter;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void transmit('..CW.templateDeclareFunctionSignature(0, nargs)..') const\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'connections_list copy(m_receivers);\n'
	output = output..tabs(2)..				'connections_list::const_iterator iter = copy.begin();\n'
	output = output..tabs(2)..				'connections_list::const_iterator sentinel = copy.end();\n'
	output = output..tabs(2)..				'while (iter != sentinel)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'(*iter)->transmit('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(3)..					'++iter;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'inline void operator()('..CW.templateDeclareFunctionSignature(0, nargs)..') const\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'transmit('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..		'protected:\n'
	output = output..tabs(1)..			'void onDisconnect(Receiver* receiver)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'connections_list::iterator iter = m_receivers.begin();\n'
	output = output..tabs(2)..				'connections_list::iterator sentinel = m_receivers.end();\n'
	output = output..tabs(2)..				'while (iter != sentinel)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'Connection<'..CW.templateArgumentsSignature(0, nargs)..'>* connection = *iter;\n'
	output = output..tabs(3)..					'if (connection->getReceiver() == receiver)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'delete connection;\n'
	output = output..tabs(4)..						'm_receivers.erase(iter);\n'
	output = output..tabs(4)..						'return;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'++iter;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void disconnectAll(void)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'connections_list::const_iterator iter = m_receivers.begin();\n'
	output = output..tabs(2)..				'connections_list::const_iterator sentinel = m_receivers.end();\n'
	output = output..tabs(2)..				'while (iter != sentinel)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'(*iter)->getReceiver()->onDisconnect(this);\n'
	output = output..tabs(3)..					'delete *iter;\n'
	output = output..tabs(3)..					'++iter;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void replicate(const Receiver* receiver, Receiver* new_receiver)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'connections_list::iterator iter = m_receivers.begin();\n'
	output = output..tabs(2)..				'connections_list::iterator sentinel = m_receivers.end();\n'
	output = output..tabs(2)..				'while (iter != sentinel)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'if ((*iter)->getReceiver() == receiver)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'm_receivers.push_back((*iter)->duplicate(new_receiver));\n'
	output = output..tabs(4)..						'return;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'++iter;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(0)..			'private:\n'
	output = output..tabs(1)..				'connections_list m_receivers;\n'
	output = output..tabs(1)..				'DECLARE_MUTABLE_MUTEX(m_mutex)\n'
	output = output..tabs(0)..			'}; // class Transmitter'..nargs
	myFile:write(output)
end
function writeToFile(myFile, nargs)
	for i=1,nargs do
		writeClassBasedOnNumberOfArguments(myFile, i)
		myFile:write('\n\n')
	end
	myFile:flush()
end