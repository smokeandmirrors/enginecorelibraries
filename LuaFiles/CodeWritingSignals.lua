require'Utilities'
require'CodeWriting'
local U = Utilities
local CW = CodeWriting

deprecatedNaughtyModule(...)

local tabs = function(number)
	local indent = ''
	number = number or 0
	for i = 1, number do
		indent = indent..'\t'
	end
	return indent
end

local more = function(output, numtabs, newString)
	if numtabs > 0 then
		output = output..tabs(1)..newString
	else
		output = output..newString
	end
end

function writeClassBasedOnNumberOfArguments(myFile, nargs)
	local output
	output = ''
	output = output..			'template<'..CW.templateArguments(0, nargs)..'>\n'
	output = output..			'class Transmitter'..nargs..' : public Transmitter\n'
	output = output..			'{\n'
	output = output..			'private:\n'
	output = output..tabs(1)..		'class Connection\n'
	output = output..tabs(1)..		'{\n'	
	output = output..tabs(1)..		'public:\n'
	output = output..tabs(2)..			'Connection(void) : m_next(NULL) { /* empty */ };\n'
	output = output..tabs(2)..			'virtual ~Connection(void)=0 {};\n'
	output = output..tabs(2)..			'virtual Connection* clone(void)=0;\n'
	output = output..tabs(2)..			'virtual Connection* duplicate(Receiver* receiver)=0;\n'
	output = output..tabs(2)..			'virtual Receiver* getReceiver(void) const=0;\n'
	output = output..tabs(2)..			'virtual void transmit('..CW.templateArgumentsSignature(0, nargs)..')=0;\n'
	output = output..tabs(2)..			'Connection* m_next;\n'
	output = output..tabs(1)..		'}; // class Connection\n'
	output = output..tabs(1)..		'template< class RECEIVER >\n'
	output = output..tabs(1)..		'class volatile'..nargs..'\n'
	output = output..tabs(1)..		': public Connection\n'
	output = output..tabs(1)..		'{\n'
	output = output..tabs(1)..		'public:\n'
	output = output..tabs(2)..			'volatile'..nargs..'(void)\n'
	output = output..tabs(2)..			': m_object(NULL)\n'
	output = output..tabs(2)..			', m_function(NULL)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'volatile'..nargs..'(RECEIVER* object, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..'))\n'
	output = output..tabs(2)..			': m_object(object)\n'
	output = output..tabs(2)..			', m_function(function)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'virtual Connection* clone(void)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new volatile'..nargs..'<RECEIVER>(*this);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Connection* duplicate(Receiver* receiver)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new volatile'..nargs..'<RECEIVER>(static_cast<RECEIVER*>(receiver), m_function);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Receiver* getReceiver(void) const\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return m_object;\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual void transmit('..CW.templateDeclareFunctionSignature(0, nargs)..')\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'(m_object->*m_function)('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(1)..		'private:\n'
	output = output..tabs(2)..			'RECEIVER* m_object;\n'
	output = output..tabs(2)..			'void (RECEIVER::* m_function)('..CW.templateArgumentsSignature(0, nargs)..');\n'
	output = output..tabs(1)..		'}; // class volatile'..nargs..'\n'
	output = output..tabs(1)..		'template<class RECEIVER >\n'
	output = output..tabs(1)..		'class const'..nargs..'\n'
	output = output..tabs(1)..		': public Connection\n'
	output = output..tabs(1)..		'{\n'
	output = output..tabs(1)..		'public:\n'
	output = output..tabs(2)..			'const'..nargs..'(void)\n'	
	output = output..tabs(2)..			': m_object(NULL)\n'
	output = output..tabs(2)..			', m_function(NULL)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'const'..nargs..'(RECEIVER* object, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..') const)\n'
	output = output..tabs(2)..			': m_object(object)\n'
	output = output..tabs(2)..			', m_function(function)\n'
	output = output..tabs(2)..			'{}\n'
	output = output..tabs(2)..			'virtual Connection* clone(void)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new const'..nargs..'<RECEIVER>(*this);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Connection* duplicate(Receiver* receiver)\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return new const'..nargs..'<RECEIVER>(static_cast<RECEIVER*>(receiver), m_function);\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual Receiver* getReceiver(void) const\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'return m_object;\n'
	output = output..tabs(2)..			'}\n'
	output = output..tabs(2)..			'virtual void transmit('..CW.templateDeclareFunctionSignature(0,nargs)..')\n'
	output = output..tabs(2)..			'{\n'
	output = output..tabs(3)..				'(m_object->*m_function)('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(2)..			'}\n'	
	output = output..tabs(1)..		'private:\n'
	output = output..tabs(2)..			'RECEIVER* m_object;\n'
	output = output..tabs(2)..			'void (RECEIVER::* m_function)('..CW.templateArgumentsSignature(0, nargs)..') const;\n'
	output = output..tabs(1)..		'}; // class const'..nargs..'\n'
	output = output..tabs(0)..	'public:\n'
	output = output..tabs(1)..			'Transmitter'..nargs..'(void)\n'
	output = output..tabs(2)..				': m_receivers(NULL)\n'
	output = output..tabs(2)..				', m_transmissionIter(NULL)\n'
	output = output..tabs(2)..				', m_isRepeatTransmissionRequired(false)\n'
	output = output..tabs(2)..				', m_isTransmitting(false)\n'
	output = output..tabs(1)..			'{ /* empty */}\n'
	output = output..tabs(1)..			'Transmitter'..nargs..'(const Transmitter'..nargs..'& source)\n'
	output = output..tabs(2)..				': Transmitter(source)\n'
	output = output..tabs(2)..				', m_receivers(NULL)\n'
	output = output..tabs(2)..				', m_transmissionIter(NULL)\n'
	output = output..tabs(2)..				', m_isRepeatTransmissionRequired(false)\n'
	output = output..tabs(2)..				', m_isTransmitting(false)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'Connection* iter(source.m_receivers);\n'
	output = output..tabs(2)..				'Connection* previous(NULL);\n'
	output = output..tabs(2)..				'Connection* destinationIter = m_receivers;\n'
	output = output..tabs(2)..				'while (iter)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'iter->getReceiver()->onConnect(this);\n'
	output = output..tabs(3)..					'destinationIter = iter->clone();\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'if (previous)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'previous->m_next = destinationIter;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'previous = destinationIter\n'
	output = output..tabs(3)..					'iter = iter->m_next;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'virtual ~Transmitter'..nargs..'(void)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'disconnectAll();\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'template<class RECEIVER>\n'
	output = output..tabs(1)..			'void connect(RECEIVER* receiver, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..'))\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'if (receiver && function)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'SYNC(m_mutex);\n'
	output = output..tabs(3)..					'Connection* iter(m_receivers);\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'while (iter)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'if (iter->getReceiver() == static_cast<Receiver*>(receiver))\n'
	output = output..tabs(4)..						'{\n'
	output = output..tabs(5)..							'return;\n'
	output = output..tabs(4)..						'}\n'
	output = output..tabs(4)..						'\n'
	output = output..tabs(4)..						'iter = iter->m_next;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'Connection* connection(new volatile'..nargs..'<RECEIVER>(receiver, function));\n'
	output = output..tabs(3)..					'connection->m_next = m_receivers;\n'	
	output = output..tabs(3)..					'm_receivers = connection;\n'	
	output = output..tabs(3)..					'receiver->onConnect(this);\n'	
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'	
	output = output..tabs(1)..			'template<class RECEIVER>\n'
	output = output..tabs(1)..			'void connect(RECEIVER* receiver, void (RECEIVER::* function)('..CW.templateArgumentsSignature(0, nargs)..') const)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'if (receiver && function)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'SYNC(m_mutex);\n'
	output = output..tabs(3)..					'Connection* iter(m_receivers);\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'while (iter)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'if (iter->getReceiver() == static_cast<Receiver*>(receiver))\n'
	output = output..tabs(4)..						'{\n'
	output = output..tabs(5)..							'return;\n'
	output = output..tabs(4)..						'}\n'
	output = output..tabs(4)..						'\n'
	output = output..tabs(4)..						'iter = iter->m_next;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'Connection* connection(new const'..nargs..'<RECEIVER>(receiver, function));\n'
	output = output..tabs(3)..					'connection->m_next = m_receivers;\n'	
	output = output..tabs(3)..					'm_receivers = connection;\n'	
	output = output..tabs(3)..					'receiver->onConnect(this);\n'	
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void ceaseTransmission(void)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'disconnectAll();\n'
	output = output..tabs(2)..				'm_isTransmitting = false;\n'
	output = output..tabs(2)..				'm_transmissionIter = NULL;\n'
	output = output..tabs(2)..				'm_receivers = NULL;\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void disconnect(Receiver* receiver)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'if (receiver)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'SYNC(m_mutex);\n'
	output = output..tabs(3)..					'Connection* iter(m_receivers);\n'
	output = output..tabs(3)..					'Connection* previous(NULL);\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'while (iter)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'if (iter->getReceiver() == receiver)'
	output = output..tabs(4)..						'{\n'	
	output = output..tabs(5)..							'receiver->onDisconnect(this);\n'
	output = output..tabs(5)..							'\n'
	output = output..tabs(5)..							'if (previous)\n'
	output = output..tabs(5)..							'{	\n'
	output = output..tabs(6)..								'previous->m_next = iter->m_next;\n'
	output = output..tabs(5)..							'}\n'
	output = output..tabs(5)..							'else \n'
	output = output..tabs(5)..							'{\n'
	output = output..tabs(6)..								'm_receivers = iter->m_next;\n'
	output = output..tabs(5)..							'}\n'
	output = output..tabs(5)..							'\n'
	output = output..tabs(5)..							'// if transmitting...	\n'
	output = output..tabs(5)..							'if (m_isTransmitting)\n'
	output = output..tabs(5)..							'{	// ... and we just removed the transmission iter ...\n'
	output = output..tabs(6)..								'if (m_transmissionIter == iter)\n'
	output = output..tabs(6)..								'{	// .. set the iterator back one to preserve the transmission iteration\n'
	output = output..tabs(7)..									'm_transmissionIter = previous;\n'
	output = output..tabs(6)..								'}\n'
	output = output..tabs(5)..							'}\n'
	output = output..tabs(5)..							'\n'
	output = output..tabs(5)..							'delete iter;\n'
	output = output..tabs(5)..							'break;\n'
	output = output..tabs(4)..						'}'
	output = output..tabs(4)..						'\n'
	output = output..tabs(4)..						'previous = iter;\n'
	output = output..tabs(4)..						'iter = iter->m_next;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void transmit('..CW.templateDeclareFunctionSignature(0, nargs)..')\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'if (m_isTransmitting)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'm_isRepeatTransmissionRequired = true;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(2)..				'else\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'm_isTransmitting = true;\n'
	output = output..tabs(3)..					'm_transmissionIter = m_receivers;\n'
	output = output..tabs(3)..					'// the receiver list can change be modified transmission\n'
	output = output..tabs(3)..					'while (m_transmissionIter)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'm_transmissionIter->transmit('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(4)..						'// calling transmit() might have triggered the removal of the receiver\n'
	output = output..tabs(4)..						'if (m_transmissionIter)\n'
	output = output..tabs(5)..							'm_transmissionIter = m_transmissionIter->m_next;\n'
	output = output..tabs(4)..						'else\n'
	output = output..tabs(5)..							'm_transmissionIter = m_receivers;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'm_isTransmitting = false;\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'if (m_isRepeatTransmissionRequired)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'm_isRepeatTransmissionRequired = false;\n'
	output = output..tabs(4)..						'transmit('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'inline void operator()('..CW.templateDeclareFunctionSignature(0, nargs)..')\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'transmit('..CW.templateFunctionCallArguments(0, nargs)..');\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..		'protected:\n'
	output = output..tabs(1)..			'void onDisconnect(Receiver* receiver)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'Connection* iter(m_receivers);\n'
	output = output..tabs(2)..				'Connection* previous(NULL);\n'
	output = output..tabs(2)..				'\n'
	output = output..tabs(2)..				'while (iter)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'if (iter->getReceiver() == receiver)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'if (previous)\n'
	output = output..tabs(4)..						'{\n'
	output = output..tabs(5)..							'previous->m_next = iter->m_next;\n'
	output = output..tabs(4)..						'}\n'
	output = output..tabs(4)..						'else\n'
	output = output..tabs(4)..						'{\n'
	output = output..tabs(5)..							'm_receivers = iter->m_next;\n'
	output = output..tabs(4)..						'}\n'
	output = output..tabs(4)..						'\n'
	output = output..tabs(4)..						'delete iter;\n'
	output = output..tabs(4)..						'break;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(3)..					'\n'
	output = output..tabs(3)..					'previous = iter;\n'
	output = output..tabs(3)..					'iter = iter->m_next;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void disconnectAll(void)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'Connection* iter(m_receivers);\n'
	output = output..tabs(2)..				'\n'
	output = output..tabs(2)..				'while (iter)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'iter->getReceiver()->onDisconnect(this);\n'
	output = output..tabs(3)..					'Connection* stale(iter);\n'
	output = output..tabs(3)..					'iter = iter->m_next;\n'
	output = output..tabs(3)..					'delete stale;\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(2)..				'\n'
	output = output..tabs(2)..				'm_receivers = NULL;'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(1)..			'void replicate(const Receiver* receiver, Receiver* new_receiver)\n'
	output = output..tabs(1)..			'{\n'
	output = output..tabs(2)..				'SYNC(m_mutex);\n'
	output = output..tabs(2)..				'Connection* iter(m_receivers);\n'
	output = output..tabs(2)..				'\n'
	output = output..tabs(2)..				'while (iter)\n'
	output = output..tabs(2)..				'{\n'
	output = output..tabs(3)..					'if (iter->getReceiver() == receiver)\n'
	output = output..tabs(3)..					'{\n'
	output = output..tabs(4)..						'Connection* connection = iter->duplicate(new_receiver);\n'
	output = output..tabs(4)..						'connection->m_next = m_receivers;\n'
	output = output..tabs(4)..						'm_receivers = connection;\n'
	output = output..tabs(4)..						'break;\n'
	output = output..tabs(3)..					'}\n'
	output = output..tabs(2)..				'}\n'
	output = output..tabs(1)..			'}\n'
	output = output..tabs(0)..			'private:\n'
	output = output..tabs(1)..				'DECLARE_MUTABLE_MUTEX(m_mutex)\n'
	output = output..tabs(1)..				'Connection* m_receivers;\n'
	output = output..tabs(1)..				'Connection* m_transmissionIter;\n'
	output = output..tabs(1)..				'bool m_isRepeatTransmissionRequired;\n'
	output = output..tabs(1)..				'bool m_isTransmitting;\n'
	output = output..tabs(0)..			'}; // class Transmitter'..nargs
	myFile:write(output)
end

function writeFileEnd(myFile)
	myFile:write('} // namespace signals\n#endif//SIGNALS_H')
end

function writeToFile(myFile, nargs)
	for i=1,nargs do
		writeClassBasedOnNumberOfArguments(myFile, i)
		myFile:write('\n\n')
	end
	writeFileEnd(myFile)	
	myFile:flush()
end