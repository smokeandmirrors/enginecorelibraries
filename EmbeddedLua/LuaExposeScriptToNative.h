#pragma once
#ifndef LUA_EXPOSE_SCRIPT_TO_NATIVE_H
#define LUA_EXPOSE_NATIVE_TO_SCRIPT_H
/**
\file LuaScriptToNative.h

\brief This file attempts to make even easier the generation C++ functions
that are exposed to Lua.

\author Smoke and Mirrors Development
\htmlonly
<A HREF="smokeandmirrorsdevelopment@gmail.com">
smokeandmirrorsdevelopment@gmail.com</A>
<BR>
&copy;2009-2011 Smoke and Mirrors Development
<BR>
\endhtmlonly
\date 9/20/2011

\warning THIS FUNCTIONALITY IS NOT THREAD SAFE.

<DEVELOPMENT STATUS>
Current Draft		:	0.0
Current Phase		:   DEVELOPMENT
Purpose				:	DEPLOYMENT
Unit Tested			:	NO
Used in development	:	NO
Used in experiments :	YES
Tested in the field	:	NO
*/

#include "Platform.h"
#include "Lua.h"
#include "LuaExtensibility.h"
#include "LuaInclusions.h"
#include "LuaStateInteraction.h"
#include "TemplateArguments.h"

namespace embeddedLua
{
	typedef enum ScriptToNativeCallResult
	{
		functionSuccess=0,
		functionNotFound,
		functionError,
		moduleNotFound
	}; // ScriptToNativeCallResult

	/** callStaticReturn0Param0 */
	inline ScriptToNativeCallResult 
		callStaticReturn0Param0(lua_State* L, const char* scriptFunction, const char* module="_G")
	{
		lua_getglobal(L, module);				/*s: ? */
		if (lua_istable(L, -1))					
		{
			lua_getfield(L, -1, scriptFunction);/*s: module ? */
			if (lua_isfunction(L, -1))
			{									/*s: module scriptFunction */
				lua_call(L, 0, 0);				/*s: module */
				lua_pop(L, 1);					/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{									/*s: module nil */
				lua_pop(L, 2);					/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{										/*s: !table */
			lua_pop(L, 1);
			return embeddedLua::moduleNotFound;
		}
	} // callStaticReturn0Param0

	/** hybridConstReturn0Param0 */
	template<typename CLASS, void(CLASS::* nativeFunction)(void) const>
	inline ScriptToNativeCallResult 
		hybridConstReturn0Param0(lua_State* L, const char* scriptFunction, const CLASS& object)
	{
		push(L, object);					/*s: object */
		lua_getfield(L, -1, scriptFunction);/*s: object ? */
		if (lua_isfunction(L, -1))
		{									/*s: object scriptFunction */
			push(L, object);				/*s: object scriptFunction object */
			lua_call(L, 1, 0);				/*s: object */
			lua_pop(L, 1);					/*s: */
			return embeddedLua::functionSuccess;
		}
		else
		{									/*s: module nil */
			lua_pop(L, 2);					/*s: */
			(object.*nativeFunction)();
			return embeddedLua::functionNotFound;
		}
	} // hybridConstReturn0Param0

	/** hybridMemberReturn0Param0 */
	template<typename CLASS, void(CLASS::* nativeFunction)(void)>
	inline ScriptToNativeCallResult 
		hybridMemberReturn0Param0(lua_State* L, const char* scriptFunction, CLASS& object)
	{
		push(L, object);					/*s: object */
		lua_getfield(L, -1, scriptFunction);/*s: object ? */
		if (lua_isfunction(L, -1))
		{									/*s: object scriptFunction */
			push(L, object);				/*s: object scriptFunction object */
			lua_call(L, 1, 0);				/*s: object */
			lua_pop(L, 1);					/*s: */
			return embeddedLua::functionSuccess;
		}
		else
		{									/*s: module nil */
			lua_pop(L, 2);					/*s: */
			(object.*nativeFunction)();
			return embeddedLua::functionNotFound;
		}
	} // hybridMemberReturn0Param0

	/** hybridStaticReturn0Param0 */
	template<void(* nativeFunction)(void)>
	inline ScriptToNativeCallResult 
		hybridStaticReturn0Param0(lua_State* L, const char* scriptFunction, const char* module="_G")
	{	
		lua_getglobal(L, module);				/*s: ? */
		if (lua_istable(L, -1))					
		{
			lua_getfield(L, -1, scriptFunction);/*s: module ? */
			if (lua_isfunction(L, -1))
			{									/*s: module scriptFunction */
				lua_call(L, 0, 0);				/*s: module */
				lua_pop(L, 1);					/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{									/*s: module nil */
				lua_pop(L, 2);					/*s: */
				(*nativeFunction)();
				return embeddedLua::functionNotFound;
			}
		}
		else
		{										/*s: !table */
			lua_pop(L, 1);
			(*nativeFunction)();
			return embeddedLua::moduleNotFound;
		}
	} // hybridStaticReturn0Param0

	/** pcallStaticReturn0Param0 */
	inline ScriptToNativeCallResult 
		pcallStaticReturn0Param0(lua_State* L, const char* scriptFunction, const char* module="_G")
	{
		lua_getglobal(L, module);				/*s: ? */
		if (lua_istable(L, -1))					
		{
			lua_getfield(L, -1, scriptFunction);/*s: module ? */
			if (lua_isfunction(L, -1))
			{									/*s: module scriptFunction */
				if (!Lua::callProtected(L, 0, 0))
				{								/*s: module */
					lua_pop(L, 1);				/*s: */
					return embeddedLua::functionSuccess;
				}
				else
				{								/*s: module */
					lua_pop(L, 1);				/*s: */
					return embeddedLua::functionError;
				}
			}
			else
			{									/*s: module nil */
				lua_pop(L, 2);					/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{										/*s: !table */
			lua_pop(L, 1);						/*s: */
			return embeddedLua::moduleNotFound;
		}						
	} // pcallStaticReturn0Param0

	/** phybridConstReturn0Param0 */
	template<typename CLASS, void(CLASS::* nativeFunction)(void) const>
	inline ScriptToNativeCallResult 
		phybridConstReturn0Param0(lua_State* L, const char* scriptFunction, const CLASS& object)
	{
		push(L, object);					/*s: object */
		lua_getfield(L, -1, scriptFunction);/*s: object ? */
		if (lua_isfunction(L, -1))
		{									/*s: object scriptFunction */
			push(L, object);				/*s: object scriptFunction object */
			if (!Lua::callProtected(L, 1, 0))
			{								/*s: object */
				lua_pop(L, 1);				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{								/*s: object */
				lua_pop(L, 1);				/*s: */
				return embeddedLua::functionError;
			}				
		}
		else
		{									/*s: object nil */
			lua_pop(L, 2);					/*s: */
			(object.*nativeFunction)();
			return embeddedLua::functionNotFound;
		}
	} // phybridConstReturn0Param0

	/** phybridMemberReturn0Param0 */
	template<typename CLASS, void(CLASS::* nativeFunction)(void)>
	inline ScriptToNativeCallResult 
		phybridMemberReturn0Param0(lua_State* L, const char* scriptFunction, CLASS& object)
	{
		push(L, object);					/*s: object */
		lua_getfield(L, -1, scriptFunction);/*s: object ? */
		if (lua_isfunction(L, -1))
		{									/*s: object scriptFunction */
			push(L, object);				/*s: object scriptFunction object */
			if (!Lua::callProtected(L, 1, 0))
			{								/*s: object */
				lua_pop(L, 1);				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{								/*s: object */
				lua_pop(L, 1);				/*s: */
				return embeddedLua::functionError;
			}				
		}
		else
		{									/*s: object nil */
			lua_pop(L, 2);					/*s: */
			(object.*nativeFunction)();
			return embeddedLua::functionNotFound;
		}
	} // phybridMemberReturn0Param0

	/** phybridStaticReturn0Param0 */
	template<void(* nativeFunction)(void)>
	inline ScriptToNativeCallResult 
		phybridStaticReturn0Param0(lua_State* L, const char* scriptFunction, const char* module="_G")
	{	
		lua_getglobal(L, module);				/*s: ? */
		if (lua_istable(L, -1))					
		{
			lua_getfield(L, -1, scriptFunction);/*s: module ? */
			if (lua_isfunction(L, -1))
			{									/*s: module scriptFunction */
				if (!Lua::callProtected(L, 0, 0))
				{								/*s: module */
					lua_pop(L, 1);				/*s: */
					return embeddedLua::functionSuccess;
				}
				else
				{								/*s: module */
					lua_pop(L, 1);				/*s: */
					return embeddedLua::functionError;
				}
			}
			else
			{									/*s: module nil */
				lua_pop(L, 2);					/*s: */
				(*nativeFunction)();
				return embeddedLua::functionNotFound;
			}
		}
		else
		{										/*s: !table */
			lua_pop(L, 1);
			(*nativeFunction)();
			return embeddedLua::moduleNotFound;
		}
	} // phybridStaticReturn0Param0

	/** callStaticReturn0Param1 */
	template<typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn0Param1(lua_State* L, const char* scriptFunction, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param1

	/** hybridConstReturn0Param1 */
	template<typename CLASS, typename ARG_1, void (CLASS::* nativeFunction)(ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param1(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param1

	/** hybridMemberReturn0Param1 */
	template<typename CLASS, typename ARG_1, void (CLASS::* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param1(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param1

	/** hybridStaticReturn0Param1 */
	template<typename ARG_1, void (* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param1(lua_State* L, const char* scriptFunction, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param1

	/** pcallStaticReturn0Param1 */
	template<typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn0Param1(lua_State* L, const char* scriptFunction, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param1

	/** phybridConstReturn0Param1 */
	template<typename CLASS, typename ARG_1, void (CLASS::* nativeFunction)(ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param1(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param1

	/** phybridMemberReturn0Param1 */
	template<typename CLASS, typename ARG_1, void (CLASS::* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param1(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param1

	/** phybridStaticReturn0Param1 */
	template<typename ARG_1, void (* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param1(lua_State* L, const char* scriptFunction, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param1

	/** callStaticReturn0Param2 */
	template<typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn0Param2(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param2

	/** hybridConstReturn0Param2 */
	template<typename CLASS, typename ARG_1, typename ARG_2, void (CLASS::* nativeFunction)(ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param2(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param2

	/** hybridMemberReturn0Param2 */
	template<typename CLASS, typename ARG_1, typename ARG_2, void (CLASS::* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param2(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param2

	/** hybridStaticReturn0Param2 */
	template<typename ARG_1, typename ARG_2, void (* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param2(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param2

	/** pcallStaticReturn0Param2 */
	template<typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn0Param2(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param2

	/** phybridConstReturn0Param2 */
	template<typename CLASS, typename ARG_1, typename ARG_2, void (CLASS::* nativeFunction)(ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param2(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param2

	/** phybridMemberReturn0Param2 */
	template<typename CLASS, typename ARG_1, typename ARG_2, void (CLASS::* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param2(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param2

	/** phybridStaticReturn0Param2 */
	template<typename ARG_1, typename ARG_2, void (* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param2(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param2

	/** callStaticReturn0Param3 */
	template<typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn0Param3(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param3

	/** hybridConstReturn0Param3 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param3(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param3

	/** hybridMemberReturn0Param3 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param3(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param3

	/** hybridStaticReturn0Param3 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, void (* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param3(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param3

	/** pcallStaticReturn0Param3 */
	template<typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn0Param3(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param3

	/** phybridConstReturn0Param3 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param3(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param3

	/** phybridMemberReturn0Param3 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param3(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param3

	/** phybridStaticReturn0Param3 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, void (* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param3(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param3

	/** callStaticReturn0Param4 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn0Param4(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param4

	/** hybridConstReturn0Param4 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param4(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param4

	/** hybridMemberReturn0Param4 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param4(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param4

	/** hybridStaticReturn0Param4 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param4(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param4

	/** pcallStaticReturn0Param4 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn0Param4(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param4

	/** phybridConstReturn0Param4 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param4(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param4

	/** phybridMemberReturn0Param4 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param4(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param4

	/** phybridStaticReturn0Param4 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param4(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param4

	/** callStaticReturn0Param5 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn0Param5(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param5

	/** hybridConstReturn0Param5 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param5(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param5

	/** hybridMemberReturn0Param5 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param5(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param5

	/** hybridStaticReturn0Param5 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param5(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param5

	/** pcallStaticReturn0Param5 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn0Param5(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param5

	/** phybridConstReturn0Param5 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param5(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param5

	/** phybridMemberReturn0Param5 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param5(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param5

	/** phybridStaticReturn0Param5 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param5(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param5

	/** callStaticReturn0Param6 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn0Param6(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param6

	/** hybridConstReturn0Param6 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param6(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param6

	/** hybridMemberReturn0Param6 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param6(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param6

	/** hybridStaticReturn0Param6 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param6(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param6

	/** pcallStaticReturn0Param6 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn0Param6(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param6

	/** phybridConstReturn0Param6 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param6(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param6

	/** phybridMemberReturn0Param6 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param6(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param6

	/** phybridStaticReturn0Param6 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param6(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param6

	/** callStaticReturn0Param7 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn0Param7(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param7

	/** hybridConstReturn0Param7 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param7(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param7

	/** hybridMemberReturn0Param7 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param7(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param7

	/** hybridStaticReturn0Param7 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param7(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param7

	/** pcallStaticReturn0Param7 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn0Param7(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param7

	/** phybridConstReturn0Param7 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param7(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param7

	/** phybridMemberReturn0Param7 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param7(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param7

	/** phybridStaticReturn0Param7 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param7(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param7

	/** callStaticReturn0Param8 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn0Param8(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param8

	/** hybridConstReturn0Param8 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param8(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param8

	/** hybridMemberReturn0Param8 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param8(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param8

	/** hybridStaticReturn0Param8 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param8(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param8

	/** pcallStaticReturn0Param8 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn0Param8(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param8

	/** phybridConstReturn0Param8 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param8(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param8

	/** phybridMemberReturn0Param8 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param8(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param8

	/** phybridStaticReturn0Param8 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param8(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param8

	/** callStaticReturn0Param9 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn0Param9(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param9

	/** hybridConstReturn0Param9 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param9(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param9

	/** hybridMemberReturn0Param9 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param9(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param9

	/** hybridStaticReturn0Param9 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param9(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param9

	/** pcallStaticReturn0Param9 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn0Param9(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param9

	/** phybridConstReturn0Param9 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param9(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param9

	/** phybridMemberReturn0Param9 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param9(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param9

	/** phybridStaticReturn0Param9 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param9(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param9

	/** callStaticReturn0Param10 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn0Param10(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn0Param10

	/** hybridConstReturn0Param10 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn0Param10(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn0Param10

	/** hybridMemberReturn0Param10 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn0Param10(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 0); 
			/*s: object (return values) */ 
			lua_pop(L, 1); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn0Param10

	/** hybridStaticReturn0Param10 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn0Param10(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 0);
				/*s: module (return values) */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn0Param10

	/** pcallStaticReturn0Param10 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn0Param10(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn0Param10

	/** phybridConstReturn0Param10 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn0Param10(lua_State* L, const char* scriptFunction, const CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn0Param10

	/** phybridMemberReturn0Param10 */
	template<typename CLASS, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, void (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn0Param10(lua_State* L, const char* scriptFunction, CLASS& object, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 0))
			{	/*s: object (return values) */ 
				lua_pop(L, 1); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			(object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn0Param10

	/** phybridStaticReturn0Param10 */
	template<typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, void (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn0Param10(lua_State* L, const char* scriptFunction, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 0))
				{	/*s: module (return values) */ 
					lua_pop(L, 1); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			(*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn0Param10

	/** callStaticReturn1Param0 */
	template<typename RET_1>inline ScriptToNativeCallResult
		callStaticReturn1Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param0

	/** hybridConstReturn1Param0 */
	template<typename CLASS, typename RET_1, RET_1 (CLASS::* nativeFunction)(void) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)();
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param0

	/** hybridMemberReturn1Param0 */
	template<typename CLASS, typename RET_1, RET_1 (CLASS::* nativeFunction)(void) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)();
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param0

	/** hybridStaticReturn1Param0 */
	template<typename RET_1, RET_1 (* nativeFunction)(void) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)();
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)();
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param0

	/** pcallStaticReturn1Param0 */
	template<typename RET_1>inline ScriptToNativeCallResult
		pcallStaticReturn1Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param0

	/** phybridConstReturn1Param0 */
	template<typename CLASS, typename RET_1, RET_1 (CLASS::* nativeFunction)(void) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)();
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param0

	/** phybridMemberReturn1Param0 */
	template<typename CLASS, typename RET_1, RET_1 (CLASS::* nativeFunction)(void) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)();
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param0

	/** phybridStaticReturn1Param0 */
	template<typename RET_1, RET_1 (* nativeFunction)(void) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)();
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)();
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param0

	/** callStaticReturn1Param1 */
	template<typename RET_1, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn1Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param1

	/** hybridConstReturn1Param1 */
	template<typename CLASS, typename RET_1, typename ARG_1, RET_1 (CLASS::* nativeFunction)(ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param1

	/** hybridMemberReturn1Param1 */
	template<typename CLASS, typename RET_1, typename ARG_1, RET_1 (CLASS::* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param1

	/** hybridStaticReturn1Param1 */
	template<typename RET_1, typename ARG_1, RET_1 (* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param1

	/** pcallStaticReturn1Param1 */
	template<typename RET_1, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn1Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param1

	/** phybridConstReturn1Param1 */
	template<typename CLASS, typename RET_1, typename ARG_1, RET_1 (CLASS::* nativeFunction)(ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param1

	/** phybridMemberReturn1Param1 */
	template<typename CLASS, typename RET_1, typename ARG_1, RET_1 (CLASS::* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param1

	/** phybridStaticReturn1Param1 */
	template<typename RET_1, typename ARG_1, RET_1 (* nativeFunction)(ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param1

	/** callStaticReturn1Param2 */
	template<typename RET_1, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn1Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param2

	/** hybridConstReturn1Param2 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param2

	/** hybridMemberReturn1Param2 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param2

	/** hybridStaticReturn1Param2 */
	template<typename RET_1, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param2

	/** pcallStaticReturn1Param2 */
	template<typename RET_1, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn1Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param2

	/** phybridConstReturn1Param2 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param2

	/** phybridMemberReturn1Param2 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param2

	/** phybridStaticReturn1Param2 */
	template<typename RET_1, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param2

	/** callStaticReturn1Param3 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn1Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param3

	/** hybridConstReturn1Param3 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param3

	/** hybridMemberReturn1Param3 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param3

	/** hybridStaticReturn1Param3 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param3

	/** pcallStaticReturn1Param3 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn1Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param3

	/** phybridConstReturn1Param3 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param3

	/** phybridMemberReturn1Param3 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param3

	/** phybridStaticReturn1Param3 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param3

	/** callStaticReturn1Param4 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn1Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param4

	/** hybridConstReturn1Param4 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param4

	/** hybridMemberReturn1Param4 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param4

	/** hybridStaticReturn1Param4 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param4

	/** pcallStaticReturn1Param4 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn1Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param4

	/** phybridConstReturn1Param4 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param4

	/** phybridMemberReturn1Param4 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param4

	/** phybridStaticReturn1Param4 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param4

	/** callStaticReturn1Param5 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn1Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param5

	/** hybridConstReturn1Param5 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param5

	/** hybridMemberReturn1Param5 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param5

	/** hybridStaticReturn1Param5 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param5

	/** pcallStaticReturn1Param5 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn1Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param5

	/** phybridConstReturn1Param5 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param5

	/** phybridMemberReturn1Param5 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param5

	/** phybridStaticReturn1Param5 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param5

	/** callStaticReturn1Param6 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn1Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param6

	/** hybridConstReturn1Param6 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param6

	/** hybridMemberReturn1Param6 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param6

	/** hybridStaticReturn1Param6 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param6

	/** pcallStaticReturn1Param6 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn1Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param6

	/** phybridConstReturn1Param6 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param6

	/** phybridMemberReturn1Param6 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param6

	/** phybridStaticReturn1Param6 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param6

	/** callStaticReturn1Param7 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn1Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param7

	/** hybridConstReturn1Param7 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param7

	/** hybridMemberReturn1Param7 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param7

	/** hybridStaticReturn1Param7 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param7

	/** pcallStaticReturn1Param7 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn1Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param7

	/** phybridConstReturn1Param7 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param7

	/** phybridMemberReturn1Param7 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param7

	/** phybridStaticReturn1Param7 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param7

	/** callStaticReturn1Param8 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn1Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param8

	/** hybridConstReturn1Param8 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param8

	/** hybridMemberReturn1Param8 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param8

	/** hybridStaticReturn1Param8 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param8

	/** pcallStaticReturn1Param8 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn1Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param8

	/** phybridConstReturn1Param8 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param8

	/** phybridMemberReturn1Param8 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param8

	/** phybridStaticReturn1Param8 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param8

	/** callStaticReturn1Param9 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn1Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param9

	/** hybridConstReturn1Param9 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param9

	/** hybridMemberReturn1Param9 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param9

	/** hybridStaticReturn1Param9 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param9

	/** pcallStaticReturn1Param9 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn1Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param9

	/** phybridConstReturn1Param9 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param9

	/** phybridMemberReturn1Param9 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param9

	/** phybridStaticReturn1Param9 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param9

	/** callStaticReturn1Param10 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn1Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn1Param10

	/** hybridConstReturn1Param10 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn1Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn1Param10

	/** hybridMemberReturn1Param10 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn1Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 1); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -1);
			lua_pop(L, 2); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn1Param10

	/** hybridStaticReturn1Param10 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn1Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 1);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn1Param10

	/** pcallStaticReturn1Param10 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn1Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn1Param10

	/** phybridConstReturn1Param10 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn1Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn1Param10

	/** phybridMemberReturn1Param10 */
	template<typename CLASS, typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn1Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 1))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -1);
				lua_pop(L, 2); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn1Param10

	/** phybridStaticReturn1Param10 */
	template<typename RET_1, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn1Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 1))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -1);
					lua_pop(L, 2); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn1Param10

	/** callStaticReturn2Param0 */
	template<typename RET_1, typename RET_2>inline ScriptToNativeCallResult
		callStaticReturn2Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param0

	/** hybridConstReturn2Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, RET_1 (CLASS::* nativeFunction)(RET_2&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param0

	/** hybridMemberReturn2Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, RET_1 (CLASS::* nativeFunction)(RET_2&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param0

	/** hybridStaticReturn2Param0 */
	template<typename RET_1, typename RET_2, RET_1 (* nativeFunction)(RET_2&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param0

	/** pcallStaticReturn2Param0 */
	template<typename RET_1, typename RET_2>inline ScriptToNativeCallResult
		pcallStaticReturn2Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param0

	/** phybridConstReturn2Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, RET_1 (CLASS::* nativeFunction)(RET_2&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param0

	/** phybridMemberReturn2Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, RET_1 (CLASS::* nativeFunction)(RET_2&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param0

	/** phybridStaticReturn2Param0 */
	template<typename RET_1, typename RET_2, RET_1 (* nativeFunction)(RET_2&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param0

	/** callStaticReturn2Param1 */
	template<typename RET_1, typename RET_2, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn2Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param1

	/** hybridConstReturn2Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param1

	/** hybridMemberReturn2Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param1

	/** hybridStaticReturn2Param1 */
	template<typename RET_1, typename RET_2, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param1

	/** pcallStaticReturn2Param1 */
	template<typename RET_1, typename RET_2, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn2Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param1

	/** phybridConstReturn2Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param1

	/** phybridMemberReturn2Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param1

	/** phybridStaticReturn2Param1 */
	template<typename RET_1, typename RET_2, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param1

	/** callStaticReturn2Param2 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn2Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param2

	/** hybridConstReturn2Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param2

	/** hybridMemberReturn2Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param2

	/** hybridStaticReturn2Param2 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param2

	/** pcallStaticReturn2Param2 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn2Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param2

	/** phybridConstReturn2Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param2

	/** phybridMemberReturn2Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param2

	/** phybridStaticReturn2Param2 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param2

	/** callStaticReturn2Param3 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn2Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param3

	/** hybridConstReturn2Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param3

	/** hybridMemberReturn2Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param3

	/** hybridStaticReturn2Param3 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param3

	/** pcallStaticReturn2Param3 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn2Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param3

	/** phybridConstReturn2Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param3

	/** phybridMemberReturn2Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param3

	/** phybridStaticReturn2Param3 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param3

	/** callStaticReturn2Param4 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn2Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param4

	/** hybridConstReturn2Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param4

	/** hybridMemberReturn2Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param4

	/** hybridStaticReturn2Param4 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param4

	/** pcallStaticReturn2Param4 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn2Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param4

	/** phybridConstReturn2Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param4

	/** phybridMemberReturn2Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param4

	/** phybridStaticReturn2Param4 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param4

	/** callStaticReturn2Param5 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn2Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param5

	/** hybridConstReturn2Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param5

	/** hybridMemberReturn2Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param5

	/** hybridStaticReturn2Param5 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param5

	/** pcallStaticReturn2Param5 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn2Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param5

	/** phybridConstReturn2Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param5

	/** phybridMemberReturn2Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param5

	/** phybridStaticReturn2Param5 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param5

	/** callStaticReturn2Param6 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn2Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param6

	/** hybridConstReturn2Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param6

	/** hybridMemberReturn2Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param6

	/** hybridStaticReturn2Param6 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param6

	/** pcallStaticReturn2Param6 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn2Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param6

	/** phybridConstReturn2Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param6

	/** phybridMemberReturn2Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param6

	/** phybridStaticReturn2Param6 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param6

	/** callStaticReturn2Param7 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn2Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param7

	/** hybridConstReturn2Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param7

	/** hybridMemberReturn2Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param7

	/** hybridStaticReturn2Param7 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param7

	/** pcallStaticReturn2Param7 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn2Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param7

	/** phybridConstReturn2Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param7

	/** phybridMemberReturn2Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param7

	/** phybridStaticReturn2Param7 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param7

	/** callStaticReturn2Param8 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn2Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param8

	/** hybridConstReturn2Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param8

	/** hybridMemberReturn2Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param8

	/** hybridStaticReturn2Param8 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param8

	/** pcallStaticReturn2Param8 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn2Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param8

	/** phybridConstReturn2Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param8

	/** phybridMemberReturn2Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param8

	/** phybridStaticReturn2Param8 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param8

	/** callStaticReturn2Param9 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn2Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param9

	/** hybridConstReturn2Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param9

	/** hybridMemberReturn2Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param9

	/** hybridStaticReturn2Param9 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param9

	/** pcallStaticReturn2Param9 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn2Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param9

	/** phybridConstReturn2Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param9

	/** phybridMemberReturn2Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param9

	/** phybridStaticReturn2Param9 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param9

	/** callStaticReturn2Param10 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn2Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn2Param10

	/** hybridConstReturn2Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn2Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn2Param10

	/** hybridMemberReturn2Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn2Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 2); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -2);
			ret2 = to<RET_2>(L, -1);
			lua_pop(L, 3); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn2Param10

	/** hybridStaticReturn2Param10 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn2Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 2);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn2Param10

	/** pcallStaticReturn2Param10 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn2Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn2Param10

	/** phybridConstReturn2Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn2Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn2Param10

	/** phybridMemberReturn2Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn2Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 2))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -2);
				ret2 = to<RET_2>(L, -1);
				lua_pop(L, 3); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn2Param10

	/** phybridStaticReturn2Param10 */
	template<typename RET_1, typename RET_2, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn2Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 2))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -2);
					ret2 = to<RET_2>(L, -1);
					lua_pop(L, 3); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn2Param10

	/** callStaticReturn3Param0 */
	template<typename RET_1, typename RET_2, typename RET_3>inline ScriptToNativeCallResult
		callStaticReturn3Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param0

	/** hybridConstReturn3Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param0

	/** hybridMemberReturn3Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param0

	/** hybridStaticReturn3Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, RET_1 (* nativeFunction)(RET_2&, RET_3&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param0

	/** pcallStaticReturn3Param0 */
	template<typename RET_1, typename RET_2, typename RET_3>inline ScriptToNativeCallResult
		pcallStaticReturn3Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param0

	/** phybridConstReturn3Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param0

	/** phybridMemberReturn3Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param0

	/** phybridStaticReturn3Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, RET_1 (* nativeFunction)(RET_2&, RET_3&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param0

	/** callStaticReturn3Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn3Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param1

	/** hybridConstReturn3Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param1

	/** hybridMemberReturn3Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param1

	/** hybridStaticReturn3Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param1

	/** pcallStaticReturn3Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn3Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param1

	/** phybridConstReturn3Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param1

	/** phybridMemberReturn3Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param1

	/** phybridStaticReturn3Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param1

	/** callStaticReturn3Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn3Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param2

	/** hybridConstReturn3Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param2

	/** hybridMemberReturn3Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param2

	/** hybridStaticReturn3Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param2

	/** pcallStaticReturn3Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn3Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param2

	/** phybridConstReturn3Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param2

	/** phybridMemberReturn3Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param2

	/** phybridStaticReturn3Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param2

	/** callStaticReturn3Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn3Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param3

	/** hybridConstReturn3Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param3

	/** hybridMemberReturn3Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param3

	/** hybridStaticReturn3Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param3

	/** pcallStaticReturn3Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn3Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param3

	/** phybridConstReturn3Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param3

	/** phybridMemberReturn3Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param3

	/** phybridStaticReturn3Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param3

	/** callStaticReturn3Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn3Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param4

	/** hybridConstReturn3Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param4

	/** hybridMemberReturn3Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param4

	/** hybridStaticReturn3Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param4

	/** pcallStaticReturn3Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn3Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param4

	/** phybridConstReturn3Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param4

	/** phybridMemberReturn3Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param4

	/** phybridStaticReturn3Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param4

	/** callStaticReturn3Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn3Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param5

	/** hybridConstReturn3Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param5

	/** hybridMemberReturn3Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param5

	/** hybridStaticReturn3Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param5

	/** pcallStaticReturn3Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn3Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param5

	/** phybridConstReturn3Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param5

	/** phybridMemberReturn3Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param5

	/** phybridStaticReturn3Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param5

	/** callStaticReturn3Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn3Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param6

	/** hybridConstReturn3Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param6

	/** hybridMemberReturn3Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param6

	/** hybridStaticReturn3Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param6

	/** pcallStaticReturn3Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn3Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param6

	/** phybridConstReturn3Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param6

	/** phybridMemberReturn3Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param6

	/** phybridStaticReturn3Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param6

	/** callStaticReturn3Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn3Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param7

	/** hybridConstReturn3Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param7

	/** hybridMemberReturn3Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param7

	/** hybridStaticReturn3Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param7

	/** pcallStaticReturn3Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn3Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param7

	/** phybridConstReturn3Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param7

	/** phybridMemberReturn3Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param7

	/** phybridStaticReturn3Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param7

	/** callStaticReturn3Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn3Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param8

	/** hybridConstReturn3Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param8

	/** hybridMemberReturn3Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param8

	/** hybridStaticReturn3Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param8

	/** pcallStaticReturn3Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn3Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param8

	/** phybridConstReturn3Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param8

	/** phybridMemberReturn3Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param8

	/** phybridStaticReturn3Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param8

	/** callStaticReturn3Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn3Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param9

	/** hybridConstReturn3Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param9

	/** hybridMemberReturn3Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param9

	/** hybridStaticReturn3Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param9

	/** pcallStaticReturn3Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn3Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param9

	/** phybridConstReturn3Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param9

	/** phybridMemberReturn3Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param9

	/** phybridStaticReturn3Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param9

	/** callStaticReturn3Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn3Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn3Param10

	/** hybridConstReturn3Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn3Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn3Param10

	/** hybridMemberReturn3Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn3Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 3); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -3);
			ret2 = to<RET_2>(L, -2);
			ret3 = to<RET_3>(L, -1);
			lua_pop(L, 4); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn3Param10

	/** hybridStaticReturn3Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn3Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 3);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn3Param10

	/** pcallStaticReturn3Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn3Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn3Param10

	/** phybridConstReturn3Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn3Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn3Param10

	/** phybridMemberReturn3Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn3Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 3))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -3);
				ret2 = to<RET_2>(L, -2);
				ret3 = to<RET_3>(L, -1);
				lua_pop(L, 4); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn3Param10

	/** phybridStaticReturn3Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn3Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 3))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -3);
					ret2 = to<RET_2>(L, -2);
					ret3 = to<RET_3>(L, -1);
					lua_pop(L, 4); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn3Param10

	/** callStaticReturn4Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4>inline ScriptToNativeCallResult
		callStaticReturn4Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param0

	/** hybridConstReturn4Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param0

	/** hybridMemberReturn4Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param0

	/** hybridStaticReturn4Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param0

	/** pcallStaticReturn4Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4>inline ScriptToNativeCallResult
		pcallStaticReturn4Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param0

	/** phybridConstReturn4Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param0

	/** phybridMemberReturn4Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param0

	/** phybridStaticReturn4Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param0

	/** callStaticReturn4Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn4Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param1

	/** hybridConstReturn4Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param1

	/** hybridMemberReturn4Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param1

	/** hybridStaticReturn4Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param1

	/** pcallStaticReturn4Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn4Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param1

	/** phybridConstReturn4Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param1

	/** phybridMemberReturn4Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param1

	/** phybridStaticReturn4Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param1

	/** callStaticReturn4Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn4Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param2

	/** hybridConstReturn4Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param2

	/** hybridMemberReturn4Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param2

	/** hybridStaticReturn4Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param2

	/** pcallStaticReturn4Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn4Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param2

	/** phybridConstReturn4Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param2

	/** phybridMemberReturn4Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param2

	/** phybridStaticReturn4Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param2

	/** callStaticReturn4Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn4Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param3

	/** hybridConstReturn4Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param3

	/** hybridMemberReturn4Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param3

	/** hybridStaticReturn4Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param3

	/** pcallStaticReturn4Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn4Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param3

	/** phybridConstReturn4Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param3

	/** phybridMemberReturn4Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param3

	/** phybridStaticReturn4Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param3

	/** callStaticReturn4Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn4Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param4

	/** hybridConstReturn4Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param4

	/** hybridMemberReturn4Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param4

	/** hybridStaticReturn4Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param4

	/** pcallStaticReturn4Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn4Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param4

	/** phybridConstReturn4Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param4

	/** phybridMemberReturn4Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param4

	/** phybridStaticReturn4Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param4

	/** callStaticReturn4Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn4Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param5

	/** hybridConstReturn4Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param5

	/** hybridMemberReturn4Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param5

	/** hybridStaticReturn4Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param5

	/** pcallStaticReturn4Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn4Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param5

	/** phybridConstReturn4Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param5

	/** phybridMemberReturn4Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param5

	/** phybridStaticReturn4Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param5

	/** callStaticReturn4Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn4Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param6

	/** hybridConstReturn4Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param6

	/** hybridMemberReturn4Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param6

	/** hybridStaticReturn4Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param6

	/** pcallStaticReturn4Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn4Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param6

	/** phybridConstReturn4Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param6

	/** phybridMemberReturn4Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param6

	/** phybridStaticReturn4Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param6

	/** callStaticReturn4Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn4Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param7

	/** hybridConstReturn4Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param7

	/** hybridMemberReturn4Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param7

	/** hybridStaticReturn4Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param7

	/** pcallStaticReturn4Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn4Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param7

	/** phybridConstReturn4Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param7

	/** phybridMemberReturn4Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param7

	/** phybridStaticReturn4Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param7

	/** callStaticReturn4Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn4Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param8

	/** hybridConstReturn4Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param8

	/** hybridMemberReturn4Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param8

	/** hybridStaticReturn4Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param8

	/** pcallStaticReturn4Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn4Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param8

	/** phybridConstReturn4Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param8

	/** phybridMemberReturn4Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param8

	/** phybridStaticReturn4Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param8

	/** callStaticReturn4Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn4Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param9

	/** hybridConstReturn4Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param9

	/** hybridMemberReturn4Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param9

	/** hybridStaticReturn4Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param9

	/** pcallStaticReturn4Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn4Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param9

	/** phybridConstReturn4Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param9

	/** phybridMemberReturn4Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param9

	/** phybridStaticReturn4Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param9

	/** callStaticReturn4Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn4Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn4Param10

	/** hybridConstReturn4Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn4Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn4Param10

	/** hybridMemberReturn4Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn4Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 4); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -4);
			ret2 = to<RET_2>(L, -3);
			ret3 = to<RET_3>(L, -2);
			ret4 = to<RET_4>(L, -1);
			lua_pop(L, 5); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn4Param10

	/** hybridStaticReturn4Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn4Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 4);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn4Param10

	/** pcallStaticReturn4Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn4Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn4Param10

	/** phybridConstReturn4Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn4Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn4Param10

	/** phybridMemberReturn4Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn4Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 4))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -4);
				ret2 = to<RET_2>(L, -3);
				ret3 = to<RET_3>(L, -2);
				ret4 = to<RET_4>(L, -1);
				lua_pop(L, 5); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn4Param10

	/** phybridStaticReturn4Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn4Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 4))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -4);
					ret2 = to<RET_2>(L, -3);
					ret3 = to<RET_3>(L, -2);
					ret4 = to<RET_4>(L, -1);
					lua_pop(L, 5); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn4Param10

	/** callStaticReturn5Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5>inline ScriptToNativeCallResult
		callStaticReturn5Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param0

	/** hybridConstReturn5Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param0

	/** hybridMemberReturn5Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param0

	/** hybridStaticReturn5Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param0

	/** pcallStaticReturn5Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5>inline ScriptToNativeCallResult
		pcallStaticReturn5Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param0

	/** phybridConstReturn5Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param0

	/** phybridMemberReturn5Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param0

	/** phybridStaticReturn5Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param0

	/** callStaticReturn5Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn5Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param1

	/** hybridConstReturn5Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param1

	/** hybridMemberReturn5Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param1

	/** hybridStaticReturn5Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param1

	/** pcallStaticReturn5Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn5Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param1

	/** phybridConstReturn5Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param1

	/** phybridMemberReturn5Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param1

	/** phybridStaticReturn5Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param1

	/** callStaticReturn5Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn5Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param2

	/** hybridConstReturn5Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param2

	/** hybridMemberReturn5Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param2

	/** hybridStaticReturn5Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param2

	/** pcallStaticReturn5Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn5Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param2

	/** phybridConstReturn5Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param2

	/** phybridMemberReturn5Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param2

	/** phybridStaticReturn5Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param2

	/** callStaticReturn5Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn5Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param3

	/** hybridConstReturn5Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param3

	/** hybridMemberReturn5Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param3

	/** hybridStaticReturn5Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param3

	/** pcallStaticReturn5Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn5Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param3

	/** phybridConstReturn5Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param3

	/** phybridMemberReturn5Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param3

	/** phybridStaticReturn5Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param3

	/** callStaticReturn5Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn5Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param4

	/** hybridConstReturn5Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param4

	/** hybridMemberReturn5Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param4

	/** hybridStaticReturn5Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param4

	/** pcallStaticReturn5Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn5Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param4

	/** phybridConstReturn5Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param4

	/** phybridMemberReturn5Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param4

	/** phybridStaticReturn5Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param4

	/** callStaticReturn5Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn5Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param5

	/** hybridConstReturn5Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param5

	/** hybridMemberReturn5Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param5

	/** hybridStaticReturn5Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param5

	/** pcallStaticReturn5Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn5Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param5

	/** phybridConstReturn5Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param5

	/** phybridMemberReturn5Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param5

	/** phybridStaticReturn5Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param5

	/** callStaticReturn5Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn5Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param6

	/** hybridConstReturn5Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param6

	/** hybridMemberReturn5Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param6

	/** hybridStaticReturn5Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param6

	/** pcallStaticReturn5Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn5Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param6

	/** phybridConstReturn5Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param6

	/** phybridMemberReturn5Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param6

	/** phybridStaticReturn5Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param6

	/** callStaticReturn5Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn5Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param7

	/** hybridConstReturn5Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param7

	/** hybridMemberReturn5Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param7

	/** hybridStaticReturn5Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param7

	/** pcallStaticReturn5Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn5Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param7

	/** phybridConstReturn5Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param7

	/** phybridMemberReturn5Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param7

	/** phybridStaticReturn5Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param7

	/** callStaticReturn5Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn5Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param8

	/** hybridConstReturn5Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param8

	/** hybridMemberReturn5Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param8

	/** hybridStaticReturn5Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param8

	/** pcallStaticReturn5Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn5Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param8

	/** phybridConstReturn5Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param8

	/** phybridMemberReturn5Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param8

	/** phybridStaticReturn5Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param8

	/** callStaticReturn5Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn5Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param9

	/** hybridConstReturn5Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param9

	/** hybridMemberReturn5Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param9

	/** hybridStaticReturn5Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param9

	/** pcallStaticReturn5Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn5Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param9

	/** phybridConstReturn5Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param9

	/** phybridMemberReturn5Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param9

	/** phybridStaticReturn5Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param9

	/** callStaticReturn5Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn5Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn5Param10

	/** hybridConstReturn5Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn5Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn5Param10

	/** hybridMemberReturn5Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn5Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 5); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -5);
			ret2 = to<RET_2>(L, -4);
			ret3 = to<RET_3>(L, -3);
			ret4 = to<RET_4>(L, -2);
			ret5 = to<RET_5>(L, -1);
			lua_pop(L, 6); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn5Param10

	/** hybridStaticReturn5Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn5Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 5);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn5Param10

	/** pcallStaticReturn5Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn5Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn5Param10

	/** phybridConstReturn5Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn5Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn5Param10

	/** phybridMemberReturn5Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn5Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 5))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -5);
				ret2 = to<RET_2>(L, -4);
				ret3 = to<RET_3>(L, -3);
				ret4 = to<RET_4>(L, -2);
				ret5 = to<RET_5>(L, -1);
				lua_pop(L, 6); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn5Param10

	/** phybridStaticReturn5Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn5Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 5))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -5);
					ret2 = to<RET_2>(L, -4);
					ret3 = to<RET_3>(L, -3);
					ret4 = to<RET_4>(L, -2);
					ret5 = to<RET_5>(L, -1);
					lua_pop(L, 6); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn5Param10

	/** callStaticReturn6Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6>inline ScriptToNativeCallResult
		callStaticReturn6Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param0

	/** hybridConstReturn6Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param0

	/** hybridMemberReturn6Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param0

	/** hybridStaticReturn6Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param0

	/** pcallStaticReturn6Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6>inline ScriptToNativeCallResult
		pcallStaticReturn6Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param0

	/** phybridConstReturn6Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param0

	/** phybridMemberReturn6Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param0

	/** phybridStaticReturn6Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param0

	/** callStaticReturn6Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn6Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param1

	/** hybridConstReturn6Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param1

	/** hybridMemberReturn6Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param1

	/** hybridStaticReturn6Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param1

	/** pcallStaticReturn6Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn6Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param1

	/** phybridConstReturn6Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param1

	/** phybridMemberReturn6Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param1

	/** phybridStaticReturn6Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param1

	/** callStaticReturn6Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn6Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param2

	/** hybridConstReturn6Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param2

	/** hybridMemberReturn6Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param2

	/** hybridStaticReturn6Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param2

	/** pcallStaticReturn6Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn6Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param2

	/** phybridConstReturn6Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param2

	/** phybridMemberReturn6Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param2

	/** phybridStaticReturn6Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param2

	/** callStaticReturn6Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn6Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param3

	/** hybridConstReturn6Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param3

	/** hybridMemberReturn6Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param3

	/** hybridStaticReturn6Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param3

	/** pcallStaticReturn6Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn6Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param3

	/** phybridConstReturn6Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param3

	/** phybridMemberReturn6Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param3

	/** phybridStaticReturn6Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param3

	/** callStaticReturn6Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn6Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param4

	/** hybridConstReturn6Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param4

	/** hybridMemberReturn6Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param4

	/** hybridStaticReturn6Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param4

	/** pcallStaticReturn6Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn6Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param4

	/** phybridConstReturn6Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param4

	/** phybridMemberReturn6Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param4

	/** phybridStaticReturn6Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param4

	/** callStaticReturn6Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn6Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param5

	/** hybridConstReturn6Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param5

	/** hybridMemberReturn6Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param5

	/** hybridStaticReturn6Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param5

	/** pcallStaticReturn6Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn6Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param5

	/** phybridConstReturn6Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param5

	/** phybridMemberReturn6Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param5

	/** phybridStaticReturn6Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param5

	/** callStaticReturn6Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn6Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param6

	/** hybridConstReturn6Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param6

	/** hybridMemberReturn6Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param6

	/** hybridStaticReturn6Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param6

	/** pcallStaticReturn6Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn6Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param6

	/** phybridConstReturn6Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param6

	/** phybridMemberReturn6Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param6

	/** phybridStaticReturn6Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param6

	/** callStaticReturn6Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn6Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param7

	/** hybridConstReturn6Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param7

	/** hybridMemberReturn6Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param7

	/** hybridStaticReturn6Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param7

	/** pcallStaticReturn6Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn6Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param7

	/** phybridConstReturn6Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param7

	/** phybridMemberReturn6Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param7

	/** phybridStaticReturn6Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param7

	/** callStaticReturn6Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn6Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param8

	/** hybridConstReturn6Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param8

	/** hybridMemberReturn6Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param8

	/** hybridStaticReturn6Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param8

	/** pcallStaticReturn6Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn6Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param8

	/** phybridConstReturn6Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param8

	/** phybridMemberReturn6Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param8

	/** phybridStaticReturn6Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param8

	/** callStaticReturn6Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn6Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param9

	/** hybridConstReturn6Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param9

	/** hybridMemberReturn6Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param9

	/** hybridStaticReturn6Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param9

	/** pcallStaticReturn6Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn6Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param9

	/** phybridConstReturn6Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param9

	/** phybridMemberReturn6Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param9

	/** phybridStaticReturn6Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param9

	/** callStaticReturn6Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn6Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn6Param10

	/** hybridConstReturn6Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn6Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn6Param10

	/** hybridMemberReturn6Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn6Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 6); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -6);
			ret2 = to<RET_2>(L, -5);
			ret3 = to<RET_3>(L, -4);
			ret4 = to<RET_4>(L, -3);
			ret5 = to<RET_5>(L, -2);
			ret6 = to<RET_6>(L, -1);
			lua_pop(L, 7); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn6Param10

	/** hybridStaticReturn6Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn6Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 6);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn6Param10

	/** pcallStaticReturn6Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn6Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn6Param10

	/** phybridConstReturn6Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn6Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn6Param10

	/** phybridMemberReturn6Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn6Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 6))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -6);
				ret2 = to<RET_2>(L, -5);
				ret3 = to<RET_3>(L, -4);
				ret4 = to<RET_4>(L, -3);
				ret5 = to<RET_5>(L, -2);
				ret6 = to<RET_6>(L, -1);
				lua_pop(L, 7); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn6Param10

	/** phybridStaticReturn6Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn6Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 6))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -6);
					ret2 = to<RET_2>(L, -5);
					ret3 = to<RET_3>(L, -4);
					ret4 = to<RET_4>(L, -3);
					ret5 = to<RET_5>(L, -2);
					ret6 = to<RET_6>(L, -1);
					lua_pop(L, 7); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn6Param10

	/** callStaticReturn7Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7>inline ScriptToNativeCallResult
		callStaticReturn7Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param0

	/** hybridConstReturn7Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param0

	/** hybridMemberReturn7Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param0

	/** hybridStaticReturn7Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param0

	/** pcallStaticReturn7Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7>inline ScriptToNativeCallResult
		pcallStaticReturn7Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param0

	/** phybridConstReturn7Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param0

	/** phybridMemberReturn7Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param0

	/** phybridStaticReturn7Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param0

	/** callStaticReturn7Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn7Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param1

	/** hybridConstReturn7Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param1

	/** hybridMemberReturn7Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param1

	/** hybridStaticReturn7Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param1

	/** pcallStaticReturn7Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn7Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param1

	/** phybridConstReturn7Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param1

	/** phybridMemberReturn7Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param1

	/** phybridStaticReturn7Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param1

	/** callStaticReturn7Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn7Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param2

	/** hybridConstReturn7Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param2

	/** hybridMemberReturn7Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param2

	/** hybridStaticReturn7Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param2

	/** pcallStaticReturn7Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn7Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param2

	/** phybridConstReturn7Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param2

	/** phybridMemberReturn7Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param2

	/** phybridStaticReturn7Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param2

	/** callStaticReturn7Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn7Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param3

	/** hybridConstReturn7Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param3

	/** hybridMemberReturn7Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param3

	/** hybridStaticReturn7Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param3

	/** pcallStaticReturn7Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn7Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param3

	/** phybridConstReturn7Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param3

	/** phybridMemberReturn7Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param3

	/** phybridStaticReturn7Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param3

	/** callStaticReturn7Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn7Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param4

	/** hybridConstReturn7Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param4

	/** hybridMemberReturn7Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param4

	/** hybridStaticReturn7Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param4

	/** pcallStaticReturn7Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn7Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param4

	/** phybridConstReturn7Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param4

	/** phybridMemberReturn7Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param4

	/** phybridStaticReturn7Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param4

	/** callStaticReturn7Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn7Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param5

	/** hybridConstReturn7Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param5

	/** hybridMemberReturn7Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param5

	/** hybridStaticReturn7Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param5

	/** pcallStaticReturn7Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn7Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param5

	/** phybridConstReturn7Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param5

	/** phybridMemberReturn7Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param5

	/** phybridStaticReturn7Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param5

	/** callStaticReturn7Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn7Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param6

	/** hybridConstReturn7Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param6

	/** hybridMemberReturn7Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param6

	/** hybridStaticReturn7Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param6

	/** pcallStaticReturn7Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn7Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param6

	/** phybridConstReturn7Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param6

	/** phybridMemberReturn7Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param6

	/** phybridStaticReturn7Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param6

	/** callStaticReturn7Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn7Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param7

	/** hybridConstReturn7Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param7

	/** hybridMemberReturn7Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param7

	/** hybridStaticReturn7Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param7

	/** pcallStaticReturn7Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn7Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param7

	/** phybridConstReturn7Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param7

	/** phybridMemberReturn7Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param7

	/** phybridStaticReturn7Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param7

	/** callStaticReturn7Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn7Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param8

	/** hybridConstReturn7Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param8

	/** hybridMemberReturn7Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param8

	/** hybridStaticReturn7Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param8

	/** pcallStaticReturn7Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn7Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param8

	/** phybridConstReturn7Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param8

	/** phybridMemberReturn7Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param8

	/** phybridStaticReturn7Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param8

	/** callStaticReturn7Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn7Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param9

	/** hybridConstReturn7Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param9

	/** hybridMemberReturn7Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param9

	/** hybridStaticReturn7Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param9

	/** pcallStaticReturn7Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn7Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param9

	/** phybridConstReturn7Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param9

	/** phybridMemberReturn7Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param9

	/** phybridStaticReturn7Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param9

	/** callStaticReturn7Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn7Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn7Param10

	/** hybridConstReturn7Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn7Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn7Param10

	/** hybridMemberReturn7Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn7Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 7); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -7);
			ret2 = to<RET_2>(L, -6);
			ret3 = to<RET_3>(L, -5);
			ret4 = to<RET_4>(L, -4);
			ret5 = to<RET_5>(L, -3);
			ret6 = to<RET_6>(L, -2);
			ret7 = to<RET_7>(L, -1);
			lua_pop(L, 8); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn7Param10

	/** hybridStaticReturn7Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn7Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 7);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn7Param10

	/** pcallStaticReturn7Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn7Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn7Param10

	/** phybridConstReturn7Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn7Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn7Param10

	/** phybridMemberReturn7Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn7Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 7))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -7);
				ret2 = to<RET_2>(L, -6);
				ret3 = to<RET_3>(L, -5);
				ret4 = to<RET_4>(L, -4);
				ret5 = to<RET_5>(L, -3);
				ret6 = to<RET_6>(L, -2);
				ret7 = to<RET_7>(L, -1);
				lua_pop(L, 8); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn7Param10

	/** phybridStaticReturn7Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn7Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 7))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -7);
					ret2 = to<RET_2>(L, -6);
					ret3 = to<RET_3>(L, -5);
					ret4 = to<RET_4>(L, -4);
					ret5 = to<RET_5>(L, -3);
					ret6 = to<RET_6>(L, -2);
					ret7 = to<RET_7>(L, -1);
					lua_pop(L, 8); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn7Param10

	/** callStaticReturn8Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8>inline ScriptToNativeCallResult
		callStaticReturn8Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param0

	/** hybridConstReturn8Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param0

	/** hybridMemberReturn8Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param0

	/** hybridStaticReturn8Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param0

	/** pcallStaticReturn8Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8>inline ScriptToNativeCallResult
		pcallStaticReturn8Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param0

	/** phybridConstReturn8Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param0

	/** phybridMemberReturn8Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param0

	/** phybridStaticReturn8Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param0

	/** callStaticReturn8Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn8Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param1

	/** hybridConstReturn8Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param1

	/** hybridMemberReturn8Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param1

	/** hybridStaticReturn8Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param1

	/** pcallStaticReturn8Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn8Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param1

	/** phybridConstReturn8Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param1

	/** phybridMemberReturn8Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param1

	/** phybridStaticReturn8Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param1

	/** callStaticReturn8Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn8Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param2

	/** hybridConstReturn8Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param2

	/** hybridMemberReturn8Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param2

	/** hybridStaticReturn8Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param2

	/** pcallStaticReturn8Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn8Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param2

	/** phybridConstReturn8Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param2

	/** phybridMemberReturn8Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param2

	/** phybridStaticReturn8Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param2

	/** callStaticReturn8Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn8Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param3

	/** hybridConstReturn8Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param3

	/** hybridMemberReturn8Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param3

	/** hybridStaticReturn8Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param3

	/** pcallStaticReturn8Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn8Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param3

	/** phybridConstReturn8Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param3

	/** phybridMemberReturn8Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param3

	/** phybridStaticReturn8Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param3

	/** callStaticReturn8Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn8Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param4

	/** hybridConstReturn8Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param4

	/** hybridMemberReturn8Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param4

	/** hybridStaticReturn8Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param4

	/** pcallStaticReturn8Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn8Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param4

	/** phybridConstReturn8Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param4

	/** phybridMemberReturn8Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param4

	/** phybridStaticReturn8Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param4

	/** callStaticReturn8Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn8Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param5

	/** hybridConstReturn8Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param5

	/** hybridMemberReturn8Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param5

	/** hybridStaticReturn8Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param5

	/** pcallStaticReturn8Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn8Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param5

	/** phybridConstReturn8Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param5

	/** phybridMemberReturn8Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param5

	/** phybridStaticReturn8Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param5

	/** callStaticReturn8Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn8Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param6

	/** hybridConstReturn8Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param6

	/** hybridMemberReturn8Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param6

	/** hybridStaticReturn8Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param6

	/** pcallStaticReturn8Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn8Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param6

	/** phybridConstReturn8Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param6

	/** phybridMemberReturn8Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param6

	/** phybridStaticReturn8Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param6

	/** callStaticReturn8Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn8Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param7

	/** hybridConstReturn8Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param7

	/** hybridMemberReturn8Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param7

	/** hybridStaticReturn8Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param7

	/** pcallStaticReturn8Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn8Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param7

	/** phybridConstReturn8Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param7

	/** phybridMemberReturn8Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param7

	/** phybridStaticReturn8Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param7

	/** callStaticReturn8Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn8Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param8

	/** hybridConstReturn8Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param8

	/** hybridMemberReturn8Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param8

	/** hybridStaticReturn8Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param8

	/** pcallStaticReturn8Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn8Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param8

	/** phybridConstReturn8Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param8

	/** phybridMemberReturn8Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param8

	/** phybridStaticReturn8Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param8

	/** callStaticReturn8Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn8Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param9

	/** hybridConstReturn8Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param9

	/** hybridMemberReturn8Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param9

	/** hybridStaticReturn8Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param9

	/** pcallStaticReturn8Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn8Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param9

	/** phybridConstReturn8Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param9

	/** phybridMemberReturn8Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param9

	/** phybridStaticReturn8Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param9

	/** callStaticReturn8Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn8Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn8Param10

	/** hybridConstReturn8Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn8Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn8Param10

	/** hybridMemberReturn8Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn8Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 8); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -8);
			ret2 = to<RET_2>(L, -7);
			ret3 = to<RET_3>(L, -6);
			ret4 = to<RET_4>(L, -5);
			ret5 = to<RET_5>(L, -4);
			ret6 = to<RET_6>(L, -3);
			ret7 = to<RET_7>(L, -2);
			ret8 = to<RET_8>(L, -1);
			lua_pop(L, 9); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn8Param10

	/** hybridStaticReturn8Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn8Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 8);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn8Param10

	/** pcallStaticReturn8Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn8Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn8Param10

	/** phybridConstReturn8Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn8Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn8Param10

	/** phybridMemberReturn8Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn8Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 8))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -8);
				ret2 = to<RET_2>(L, -7);
				ret3 = to<RET_3>(L, -6);
				ret4 = to<RET_4>(L, -5);
				ret5 = to<RET_5>(L, -4);
				ret6 = to<RET_6>(L, -3);
				ret7 = to<RET_7>(L, -2);
				ret8 = to<RET_8>(L, -1);
				lua_pop(L, 9); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn8Param10

	/** phybridStaticReturn8Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn8Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 8))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -8);
					ret2 = to<RET_2>(L, -7);
					ret3 = to<RET_3>(L, -6);
					ret4 = to<RET_4>(L, -5);
					ret5 = to<RET_5>(L, -4);
					ret6 = to<RET_6>(L, -3);
					ret7 = to<RET_7>(L, -2);
					ret8 = to<RET_8>(L, -1);
					lua_pop(L, 9); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn8Param10

	/** callStaticReturn9Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9>inline ScriptToNativeCallResult
		callStaticReturn9Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param0

	/** hybridConstReturn9Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param0

	/** hybridMemberReturn9Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param0

	/** hybridStaticReturn9Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param0

	/** pcallStaticReturn9Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9>inline ScriptToNativeCallResult
		pcallStaticReturn9Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param0

	/** phybridConstReturn9Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param0

	/** phybridMemberReturn9Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param0

	/** phybridStaticReturn9Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param0

	/** callStaticReturn9Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn9Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param1

	/** hybridConstReturn9Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param1

	/** hybridMemberReturn9Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param1

	/** hybridStaticReturn9Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param1

	/** pcallStaticReturn9Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn9Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param1

	/** phybridConstReturn9Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param1

	/** phybridMemberReturn9Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param1

	/** phybridStaticReturn9Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param1

	/** callStaticReturn9Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn9Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param2

	/** hybridConstReturn9Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param2

	/** hybridMemberReturn9Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param2

	/** hybridStaticReturn9Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param2

	/** pcallStaticReturn9Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn9Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param2

	/** phybridConstReturn9Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param2

	/** phybridMemberReturn9Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param2

	/** phybridStaticReturn9Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param2

	/** callStaticReturn9Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn9Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param3

	/** hybridConstReturn9Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param3

	/** hybridMemberReturn9Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param3

	/** hybridStaticReturn9Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param3

	/** pcallStaticReturn9Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn9Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param3

	/** phybridConstReturn9Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param3

	/** phybridMemberReturn9Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param3

	/** phybridStaticReturn9Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param3

	/** callStaticReturn9Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn9Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param4

	/** hybridConstReturn9Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param4

	/** hybridMemberReturn9Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param4

	/** hybridStaticReturn9Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param4

	/** pcallStaticReturn9Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn9Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param4

	/** phybridConstReturn9Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param4

	/** phybridMemberReturn9Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param4

	/** phybridStaticReturn9Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param4

	/** callStaticReturn9Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn9Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param5

	/** hybridConstReturn9Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param5

	/** hybridMemberReturn9Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param5

	/** hybridStaticReturn9Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param5

	/** pcallStaticReturn9Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn9Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param5

	/** phybridConstReturn9Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param5

	/** phybridMemberReturn9Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param5

	/** phybridStaticReturn9Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param5

	/** callStaticReturn9Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn9Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param6

	/** hybridConstReturn9Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param6

	/** hybridMemberReturn9Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param6

	/** hybridStaticReturn9Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param6

	/** pcallStaticReturn9Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn9Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param6

	/** phybridConstReturn9Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param6

	/** phybridMemberReturn9Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param6

	/** phybridStaticReturn9Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param6

	/** callStaticReturn9Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn9Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param7

	/** hybridConstReturn9Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param7

	/** hybridMemberReturn9Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param7

	/** hybridStaticReturn9Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param7

	/** pcallStaticReturn9Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn9Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param7

	/** phybridConstReturn9Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param7

	/** phybridMemberReturn9Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param7

	/** phybridStaticReturn9Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param7

	/** callStaticReturn9Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn9Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param8

	/** hybridConstReturn9Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param8

	/** hybridMemberReturn9Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param8

	/** hybridStaticReturn9Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param8

	/** pcallStaticReturn9Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn9Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param8

	/** phybridConstReturn9Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param8

	/** phybridMemberReturn9Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param8

	/** phybridStaticReturn9Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param8

	/** callStaticReturn9Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn9Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param9

	/** hybridConstReturn9Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param9

	/** hybridMemberReturn9Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param9

	/** hybridStaticReturn9Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param9

	/** pcallStaticReturn9Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn9Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param9

	/** phybridConstReturn9Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param9

	/** phybridMemberReturn9Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param9

	/** phybridStaticReturn9Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param9

	/** callStaticReturn9Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn9Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn9Param10

	/** hybridConstReturn9Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn9Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn9Param10

	/** hybridMemberReturn9Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn9Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 9); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -9);
			ret2 = to<RET_2>(L, -8);
			ret3 = to<RET_3>(L, -7);
			ret4 = to<RET_4>(L, -6);
			ret5 = to<RET_5>(L, -5);
			ret6 = to<RET_6>(L, -4);
			ret7 = to<RET_7>(L, -3);
			ret8 = to<RET_8>(L, -2);
			ret9 = to<RET_9>(L, -1);
			lua_pop(L, 10); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn9Param10

	/** hybridStaticReturn9Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn9Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 9);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn9Param10

	/** pcallStaticReturn9Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn9Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn9Param10

	/** phybridConstReturn9Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn9Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn9Param10

	/** phybridMemberReturn9Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn9Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 9))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -9);
				ret2 = to<RET_2>(L, -8);
				ret3 = to<RET_3>(L, -7);
				ret4 = to<RET_4>(L, -6);
				ret5 = to<RET_5>(L, -5);
				ret6 = to<RET_6>(L, -4);
				ret7 = to<RET_7>(L, -3);
				ret8 = to<RET_8>(L, -2);
				ret9 = to<RET_9>(L, -1);
				lua_pop(L, 10); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn9Param10

	/** phybridStaticReturn9Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn9Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 9))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -9);
					ret2 = to<RET_2>(L, -8);
					ret3 = to<RET_3>(L, -7);
					ret4 = to<RET_4>(L, -6);
					ret5 = to<RET_5>(L, -5);
					ret6 = to<RET_6>(L, -4);
					ret7 = to<RET_7>(L, -3);
					ret8 = to<RET_8>(L, -2);
					ret9 = to<RET_9>(L, -1);
					lua_pop(L, 10); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn9Param10

	/** callStaticReturn10Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10>inline ScriptToNativeCallResult
		callStaticReturn10Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param0

	/** hybridConstReturn10Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param0

	/** hybridMemberReturn10Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 1, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param0

	/** hybridStaticReturn10Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				lua_call(L, 0, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param0

	/** pcallStaticReturn10Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10>inline ScriptToNativeCallResult
		pcallStaticReturn10Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param0

	/** phybridConstReturn10Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param0(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param0

	/** phybridMemberReturn10Param0 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param0(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 1, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param0

	/** phybridStaticReturn10Param0 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param0(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 0, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param0

	/** callStaticReturn10Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1>inline ScriptToNativeCallResult
		callStaticReturn10Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param1

	/** hybridConstReturn10Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param1

	/** hybridMemberReturn10Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 2, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param1

	/** hybridStaticReturn10Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 1, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param1

	/** pcallStaticReturn10Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1>inline ScriptToNativeCallResult
		pcallStaticReturn10Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param1

	/** phybridConstReturn10Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param1(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param1

	/** phybridMemberReturn10Param1 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param1(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 2, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param1

	/** phybridStaticReturn10Param1 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param1(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 1, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param1

	/** callStaticReturn10Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		callStaticReturn10Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param2

	/** hybridConstReturn10Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param2

	/** hybridMemberReturn10Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 3, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param2

	/** hybridStaticReturn10Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 2, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param2

	/** pcallStaticReturn10Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2>inline ScriptToNativeCallResult
		pcallStaticReturn10Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param2

	/** phybridConstReturn10Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param2(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param2

	/** phybridMemberReturn10Param2 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param2(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 3, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param2

	/** phybridStaticReturn10Param2 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param2(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 2, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param2

	/** callStaticReturn10Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		callStaticReturn10Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param3

	/** hybridConstReturn10Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param3

	/** hybridMemberReturn10Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 4, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param3

	/** hybridStaticReturn10Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 3, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param3

	/** pcallStaticReturn10Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3>inline ScriptToNativeCallResult
		pcallStaticReturn10Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param3

	/** phybridConstReturn10Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param3(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param3

	/** phybridMemberReturn10Param3 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param3(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 4, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param3

	/** phybridStaticReturn10Param3 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param3(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 3, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param3

	/** callStaticReturn10Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		callStaticReturn10Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param4

	/** hybridConstReturn10Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param4

	/** hybridMemberReturn10Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 5, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param4

	/** hybridStaticReturn10Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 4, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param4

	/** pcallStaticReturn10Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4>inline ScriptToNativeCallResult
		pcallStaticReturn10Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param4

	/** phybridConstReturn10Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param4(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param4

	/** phybridMemberReturn10Param4 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param4(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 5, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param4

	/** phybridStaticReturn10Param4 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param4(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 4, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param4

	/** callStaticReturn10Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		callStaticReturn10Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param5

	/** hybridConstReturn10Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param5

	/** hybridMemberReturn10Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 6, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param5

	/** hybridStaticReturn10Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 5, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param5

	/** pcallStaticReturn10Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5>inline ScriptToNativeCallResult
		pcallStaticReturn10Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param5

	/** phybridConstReturn10Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param5(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param5

	/** phybridMemberReturn10Param5 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param5(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 6, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param5

	/** phybridStaticReturn10Param5 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param5(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 5, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param5

	/** callStaticReturn10Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		callStaticReturn10Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param6

	/** hybridConstReturn10Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param6

	/** hybridMemberReturn10Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 7, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param6

	/** hybridStaticReturn10Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 6, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param6

	/** pcallStaticReturn10Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6>inline ScriptToNativeCallResult
		pcallStaticReturn10Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param6

	/** phybridConstReturn10Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param6(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param6

	/** phybridMemberReturn10Param6 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param6(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 7, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param6

	/** phybridStaticReturn10Param6 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param6(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 6, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param6

	/** callStaticReturn10Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		callStaticReturn10Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param7

	/** hybridConstReturn10Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param7

	/** hybridMemberReturn10Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 8, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param7

	/** hybridStaticReturn10Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 7, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param7

	/** pcallStaticReturn10Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7>inline ScriptToNativeCallResult
		pcallStaticReturn10Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param7

	/** phybridConstReturn10Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param7(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param7

	/** phybridMemberReturn10Param7 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param7(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 8, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param7

	/** phybridStaticReturn10Param7 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param7(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 7, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param7

	/** callStaticReturn10Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		callStaticReturn10Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param8

	/** hybridConstReturn10Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param8

	/** hybridMemberReturn10Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 9, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param8

	/** hybridStaticReturn10Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 8, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param8

	/** pcallStaticReturn10Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8>inline ScriptToNativeCallResult
		pcallStaticReturn10Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param8

	/** phybridConstReturn10Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param8(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param8

	/** phybridMemberReturn10Param8 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param8(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 9, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param8

	/** phybridStaticReturn10Param8 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param8(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 8, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param8

	/** callStaticReturn10Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		callStaticReturn10Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param9

	/** hybridConstReturn10Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param9

	/** hybridMemberReturn10Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 10, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param9

	/** hybridStaticReturn10Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 9, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param9

	/** pcallStaticReturn10Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9>inline ScriptToNativeCallResult
		pcallStaticReturn10Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param9

	/** phybridConstReturn10Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param9(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param9

	/** phybridMemberReturn10Param9 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param9(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 10, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param9

	/** phybridStaticReturn10Param9 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param9(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 9, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param9

	/** callStaticReturn10Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		callStaticReturn10Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // callStaticReturn10Param10

	/** hybridConstReturn10Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		hybridConstReturn10Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridConstReturn10Param10

	/** hybridMemberReturn10Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridMemberReturn10Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			lua_call(L, 11, 10); 
			/*s: object (return values) */ 
			ret1 = to<RET_1>(L, -10);
			ret2 = to<RET_2>(L, -9);
			ret3 = to<RET_3>(L, -8);
			ret4 = to<RET_4>(L, -7);
			ret5 = to<RET_5>(L, -6);
			ret6 = to<RET_6>(L, -5);
			ret7 = to<RET_7>(L, -4);
			ret8 = to<RET_8>(L, -3);
			ret9 = to<RET_9>(L, -2);
			ret10 = to<RET_10>(L, -1);
			lua_pop(L, 11); 
			/*s: */ 
			return embeddedLua::functionSuccess; 
		} 
		else 
		{	/*s: module nil */ 
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} //hybridMemberReturn10Param10

	/** hybridStaticReturn10Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		hybridStaticReturn10Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				lua_call(L, 10, 10);
				/*s: module (return values) */
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11);
				/*s: */
				return embeddedLua::functionSuccess;
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // hybridStaticReturn10Param10

	/** pcallStaticReturn10Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10>inline ScriptToNativeCallResult
		pcallStaticReturn10Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			return embeddedLua::moduleNotFound; 
		} 
	} // pcallStaticReturn10Param10

	/** phybridConstReturn10Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) const>
	inline ScriptToNativeCallResult
		phybridConstReturn10Param10(lua_State* L, const char* scriptFunction, const CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridConstReturn10Param10

	/** phybridMemberReturn10Param10 */
	template<typename CLASS, typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (CLASS::* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridMemberReturn10Param10(lua_State* L, const char* scriptFunction, CLASS& object, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10)
	{	/*s: */
		push(L, object);
		/*s: object */
		lua_getfield(L, -1, scriptFunction);
		/*s: object ? */
		if (lua_isfunction(L, -1)) 
		{	/*s: object scriptFunction */ 
			push(L, object);
			/*s: object scriptFunction object */ 
			push(L, arg1);
			push(L, arg2);
			push(L, arg3);
			push(L, arg4);
			push(L, arg5);
			push(L, arg6);
			push(L, arg7);
			push(L, arg8);
			push(L, arg9);
			push(L, arg10);
			/*s: object scriptFunction object (arguments) */ 
			if (!Lua::callProtected(L, 11, 10))
			{	/*s: object (return values) */ 
				ret1 = to<RET_1>(L, -10);
				ret2 = to<RET_2>(L, -9);
				ret3 = to<RET_3>(L, -8);
				ret4 = to<RET_4>(L, -7);
				ret5 = to<RET_5>(L, -6);
				ret6 = to<RET_6>(L, -5);
				ret7 = to<RET_7>(L, -4);
				ret8 = to<RET_8>(L, -3);
				ret9 = to<RET_9>(L, -2);
				ret10 = to<RET_10>(L, -1);
				lua_pop(L, 11); 
				/*s: */ 
				return embeddedLua::functionSuccess; 
			} 
			else
			{	/*s: object */
				lua_pop(L, 1);
				/*s: */
				return embeddedLua::functionError;
			} 
		}
		else 
		{	/*s: module nil */
			lua_pop(L, 2);
			/*s: */ 
			ret1 = (object.*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::functionNotFound; 
		} 
	} // phybridMemberReturn10Param10

	/** phybridStaticReturn10Param10 */
	template<typename RET_1, typename RET_2, typename RET_3, typename RET_4, typename RET_5, typename RET_6, typename RET_7, typename RET_8, typename RET_9, typename RET_10, typename ARG_1, typename ARG_2, typename ARG_3, typename ARG_4, typename ARG_5, typename ARG_6, typename ARG_7, typename ARG_8, typename ARG_9, typename ARG_10, RET_1 (* nativeFunction)(RET_2&, RET_3&, RET_4&, RET_5&, RET_6&, RET_7&, RET_8&, RET_9&, RET_10&, ARG_1, ARG_2, ARG_3, ARG_4, ARG_5, ARG_6, ARG_7, ARG_8, ARG_9, ARG_10) >
	inline ScriptToNativeCallResult
		phybridStaticReturn10Param10(lua_State* L, const char* scriptFunction, RET_1& ret1, RET_2& ret2, RET_3& ret3, RET_4& ret4, RET_5& ret5, RET_6& ret6, RET_7& ret7, RET_8& ret8, RET_9& ret9, RET_10& ret10, ARG_1 arg1, ARG_2 arg2, ARG_3 arg3, ARG_4 arg4, ARG_5 arg5, ARG_6 arg6, ARG_7 arg7, ARG_8 arg8, ARG_9 arg9, ARG_10 arg10, const char* module="_G")
	{	/*s: */
		lua_getglobal(L, module);
		/*s: ? */
		if (lua_istable(L, -1))
		{	/*s: module */
			lua_getfield(L, -1, scriptFunction);
			/*s: module ? */
			if (lua_isfunction(L, -1))
			{	/*s: module scriptFunction */
				push(L, arg1);
				push(L, arg2);
				push(L, arg3);
				push(L, arg4);
				push(L, arg5);
				push(L, arg6);
				push(L, arg7);
				push(L, arg8);
				push(L, arg9);
				push(L, arg10);
				/*s: module scriptFunction (arguments) */
				if (!Lua::callProtected(L, 10, 10))
				{	/*s: module (return values) */ 
					ret1 = to<RET_1>(L, -10);
					ret2 = to<RET_2>(L, -9);
					ret3 = to<RET_3>(L, -8);
					ret4 = to<RET_4>(L, -7);
					ret5 = to<RET_5>(L, -6);
					ret6 = to<RET_6>(L, -5);
					ret7 = to<RET_7>(L, -4);
					ret8 = to<RET_8>(L, -3);
					ret9 = to<RET_9>(L, -2);
					ret10 = to<RET_10>(L, -1);
					lua_pop(L, 11); 
					/*s: */ 
					return embeddedLua::functionSuccess;
				} 
				else
				{	/*s: module */
					lua_pop(L, 1);
					/*s: */
					return embeddedLua::functionError;
				} 
			}
			else
			{	/*s: module nil */
				lua_pop(L, 2);
				/*s: */
				ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
				return embeddedLua::functionNotFound;
			}
		}
		else
		{	/*s: !table */ 
			lua_pop(L, 1);
			/*s: */ 
			ret1 = (*nativeFunction)(ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			return embeddedLua::moduleNotFound; 
		} 
	} // phybridStaticReturn10Param10

} // namespace embeddedLua


#endif//LUA_EXPOSE_NATIVE_TO_SCRIPT_H